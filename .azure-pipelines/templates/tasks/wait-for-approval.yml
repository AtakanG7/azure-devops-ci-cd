parameters:
- name: jiraIssueKey
  type: string

steps:
- task: Bash@3
  inputs:
    targetType: 'inline'
    script: |
      #!/bin/bash
      set -e

      handle_error() {
        echo "Error occurred in script at line: ${1}."
        echo "Line exited with status: ${2}"
      }

      trap 'handle_error ${LINENO} $?' ERR

      jiraUrl="$(jiraBaseUrl)/issue/${{ parameters.jiraIssueKey }}"

      approved=false
      maxAttempts=60
      attempt=0

      while [ "$approved" = false ] && [ $attempt -lt $maxAttempts ]; do
        response=$(curl -s -H "Authorization: Basic $(jiraEncodedCreds)" -H "Content-Type: application/json" "$jiraUrl")
        
        if [ -z "$response" ]; then
          echo "Error: Empty response from JIRA API"
          exit 1
        fi
        
        status=$(echo "$response" | jq -r '.fields.status.name')
        
        if [ -z "$status" ] || [ "$status" = "null" ]; then
          echo "Error: Unable to parse status from JIRA response"
          echo "Response: $response"
          exit 1
        fi
        
        case "$status" in
          "Done")
            approved=true
            echo "Tester has approved the test cases. Proceeding to production."
            ;;
          "Rejected")
            echo "Tester has rejected the test cases. Pipeline will be stopped."
            exit 1
            ;;
          "To Do")
            attempt=$((attempt+1))
            echo "Issue is still in 'To Do' status. Waiting for tester action. Attempt $attempt of $maxAttempts."
            sleep 300
            ;;
          *)
            attempt=$((attempt+1))
            echo "Unexpected status: $status. Waiting for tester approval. Attempt $attempt of $maxAttempts."
            sleep 300
            ;;
        esac
      done

      if [ "$approved" = false ]; then
        echo "Tester approval timed out. Pipeline will be stopped."
        exit 1
      fi
  displayName: 'Wait for Tester Approval'
  env:
    jiraBaseUrl: $(jiraBaseUrl)
    jiraEncodedCreds: $(jiraEncodedCreds)