# .azure-pipelines/templates/create-jira-issue-template.yml
parameters:
  - name: jiraUrl
    type: string
  - name: jiraUser
    type: string
  - name: encodedCreds
    type: string
  - name: projectKey
    type: string
  - name: appUrl
    type: string

jobs:
- job: CreateJiraIssue
  pool:
    name: 'nevotek-agent'
    demands:
      - agent.name -equals nevotek-agent-001
  steps:
  - script: |
      #!/bin/bash
      set -e

      createIssueBody=$(cat <<EOF
      {
          "fields": {
             "project": {
                "key": "${{ parameters.projectKey }}"
             },
             "summary": "Deployment Ready for Testing",
             "description": "The deployment of the development image is complete and is ready for testing. The application is accessible at ${{ parameters.appUrl }}. Please approve or reject the test cases.",
             "issuetype": {
                "name": "Task"
             }
         }
      }
      EOF
      )

      response=$(curl -s -w "\n%{http_code}" -X POST "${{ parameters.jiraUrl }}" \
        -H "Content-Type: application/json" \
        -H "Authorization: Basic ${{ parameters.encodedCreds }}" \
        -d "$createIssueBody")

      httpCode=$(echo "$response" | tail -n1)
      responseBody=$(echo "$response" | head -n-1)

      if [ "$httpCode" -ne 201 ]; then
        echo "Failed to create Jira issue. HTTP response code: $httpCode"
        echo "Response body: $responseBody"
        exit 1
      fi

      issueKey=$(echo "$responseBody" | jq -r '.key')

      if [ -z "$issueKey" ] || [ "$issueKey" == "null" ]; then
        echo "Failed to extract Jira issue key. Response: $responseBody"
        exit 1
      fi

      echo "##vso[task.setvariable variable=JIRA_ISSUE_KEY;isoutput=true]$issueKey"
      echo "Jira issue created with key: $issueKey"
    displayName: 'Create Jira Issue'
    name: createJiraIssue
    failOnStderr: false
